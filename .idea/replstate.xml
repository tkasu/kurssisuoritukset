<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1441528571369">{:repl-history {:ide [], :local [&quot;(require 'kurssisuoritukset.data :as data)&quot; &quot;(use 'kurssisuoritukset.data :as data)&quot; &quot;(require [kurssisuoritukset.data :as data])&quot; &quot;(current-page)&quot; &quot;(data/current-page)&quot; &quot;(+ 2 2)&quot; &quot;(ns 'kurssisuoritukset.data)&quot; &quot;@studentsA&quot; &quot;studentsA&quot; &quot;(studentsA)&quot; &quot;(@studentsA)&quot; &quot;@coursessA&quot; &quot;(get-in @coursesA [1 :assignments :results])&quot; &quot;(reduce\n  conj\n  (get-in @coursesA [1 :assignments]))&quot; &quot;(reduce\n  #(conj (vals %1))\n  (get-in @coursesA [1 :assignments]))&quot; &quot;(reduce\n  #(conj (seq %1))\n  (get-in @coursesA [1 :assignments]))&quot; &quot;(reduce\n  #(conj (:student-id %1))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  #(conj (seq %1))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(get-course 1)&quot; &quot;(:assignments (get-course 1))&quot; &quot;(reduce\n  #(conj (get %1 :results))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  #(conj (:student-id vals (get %1 :results)))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  #(conj (:student-id (vals (get %1 :results))))\n  (vals (get-in @coursesA [1 :assignments]))9)&quot; &quot;(reduce\n  #(conj (vals (get %1 :results)))\n  (vals (get-in @coursesA [1 :assignments]))9)&quot; &quot;(reduce\n  #(conj (:student-id (vals (get %1 :results))))\n  (vals (get-in @coursesA [1 :assignments]))1)&quot; &quot;(reduce\n  #(conj (:student-id (vals (get %1 :results))))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  #(conj ((vals (get %1 :results))))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  #(conj (vals (get %1 :results)))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  #(conj (vals (get %1 :results)))\n  (vals (get-in @coursesA [1 :assignments])) [])&quot; &quot;(reduce\n  #(conj (vals (get _ :results)))\n  (vals (get-in @coursesA [1 :assignments])) [])&quot; &quot;(reduce\n  #(conj (vals (get % :results)))\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  #(conj (vals (get % :results)))\n  (vals (get-in @coursesA [1 :assignments])) [])&quot; &quot;(reduce\n  #(conj)\n  (vals (get-in @coursesA [1 :assignments])) [])&quot; &quot;(reduce\n  (println %)\n  (get-in @coursesA [1 :assignments]) [])&quot; &quot;(reduce\n  (conj % %)\n  (get-in @coursesA [1 :assignments]) [])&quot; &quot;(reduce\n  conj\n  (get-in @coursesA [1 :assignments]) [])&quot; &quot;(reduce\n  conj\n  (vals (get-in @coursesA [1 :assignments])) [])&quot; &quot;(reduce\n  (reduce conj (:results %1))\n  (vals (get-in @coursesA [1 :assignments])) \n  [])&quot; &quot;(reduce\n  (reduce conj (:results %1) [])\n  (vals (get-in @coursesA [1 :assignments])) \n  [])&quot; &quot;(reduce\n  (reduce conj #(:results %1) [])\n  (vals (get-in @coursesA [1 :assignments])) \n  [])&quot; &quot;(reduce\n  (conj (reduce conj #(:results %1) []))\n  (vals (get-in @coursesA [1 :assignments])) \n  [])&quot; &quot;(reduce\n  (fn [acc next]\n    (conj acc next))\n  (vals (get-in @coursesA [1 :assignments]))\n  [])&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (get next :results)]\n      (conj acc students)))\n  (vals (get-in @coursesA [1 :assignments]))\n  [])&quot; &quot;(get-in (get-course 1) [:assignments 1 :results])&quot; &quot;(get-in (get-course 1) [:assignments])&quot; &quot;(get (vals (get-in @coursesA [1 :assignments])) 1)&quot; &quot;(get 0 (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(:id (get-in @coursesA [1 :assignments]))&quot; &quot;(get (get-in @coursesA [1 :assignments]) 0)&quot; &quot;(vals (get-in @coursesA [1 :assignments]))&quot; &quot;(get (vals (get-in @coursesA [1 :assignments])) 0)&quot; &quot;(nth (vals (get-in @coursesA [1 :assignments])) 0)&quot; &quot;(:results (nth (vals (get-in @coursesA [1 :assignments])) 0))&quot; &quot;(vals (:results (nth (vals (get-in @coursesA [1 :assignments])) 0)))&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (:results next)]\n      (conj acc students)))\n  (vals (get-in @coursesA [1 :assignments]))\n  [])&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (:results next)]\n      (conj acc students)))\n  (vals (get-in @coursesA [1 :assignments]))\n  ())&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (seq next)]\n      (conj acc students)))\n  (vals (get-in @coursesA [1 :assignments]))\n  ())&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (seq next)]\n      (conj acc 1)))\n  (vals (get-in @coursesA [1 :assignments]))\n  ())&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (seq next)]\n      (conj acc 1)))\n  []\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (seq next)]\n      (conj acc students)))\n  []\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (:results next)]\n      (conj acc students)))\n  []\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (vals (:results next))]\n      (conj acc students)))\n  []\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(reduce\n  (fn [acc next]\n    (let [students (reduce (fn [acc-s next-s]\n                             (let [student (:student-id next-s)]\n                               (conj acc-s student)))\n                           []\n                           (vals (:results next)))]\n      (conj acc students)))\n  []\n  (vals (get-in @coursesA [1 :assignments])))&quot; &quot;(concat \n  (reduce\n    (fn [acc next]\n      (let [students (reduce (fn [acc-s next-s]\n                               (let [student (:student-id next-s)]\n                                 (conj acc-s student)))\n                             []\n                             (vals (:results next)))]\n        (conj acc students)))\n    []\n    (vals (get-in @coursesA [1 :assignments]))))&quot; &quot;(apply concat \n  (reduce\n    (fn [acc next]\n      (let [students (reduce (fn [acc-s next-s]\n                               (let [student (:student-id next-s)]\n                                 (conj acc-s student)))\n                             []\n                             (vals (:results next)))]\n        (conj acc students)))\n    []\n    (vals (get-in @coursesA [1 :assignments]))))&quot; &quot;(into [] \n      (apply concat\n        (reduce\n          (fn [acc next]\n            (let [students (reduce (fn [acc-s next-s]\n                                     (let [student (:student-id next-s)]\n                                       (conj acc-s student)))\n                                   []\n                                   (vals (:results next)))]\n              (conj acc students)))\n          []\n          (vals (get-in @coursesA [1 :assignments])))))&quot; &quot;(get-in (get-in @coursesA [1 :assignments]) [1 :results])&quot; &quot;(into []\n      (distinct\n        (apply concat\n          (reduce\n            (fn [acc next]\n              (let [students (reduce (fn [acc-s next-s]\n                                       (let [student (:student-id next-s)]\n                                         (conj acc-s student)))\n                                     []\n                                     (vals (:results next)))]\n                (conj acc students)))\n            []\n            (vals (get-in @coursesA [1 :assignments]))))))&quot; &quot;(get-in @coursesA [1 :assignments])&quot; &quot;(ns kurssisuoritukset.views.course-results-page)&quot; &quot;(result-page)&quot; &quot;(require '[kurssisuoritukset.data :as data])&quot; &quot;@add-result-atom&quot; &quot;data/add-result-atom&quot; &quot;(let [course (get-course (int (current-course)))\n      assignments (:assignments course)\n      students (get-students (int (current-course)))]\n  (for [assignment (vals assignments)]\n    (add-result\n      (int (current-course))\n      (:id assignment)\n      @add-result-atom\n      20)))&quot; &quot;(let [course (get-course (int (current-course)))\n      assignments (:assignments course)\n      students (get-students (int (current-course)))]\n  (for [assignment (vals assignments)]\n    (add-result\n      (int (current-course))\n      (:id assignment)\n      data/add-result-atom\n      20)))&quot; &quot;(let [course (get-course (int (current-course)))\n      assignments (:assignments course)\n      students (get-students (int (current-course)))]\n  (for [assignment (vals assignments)]\n    (add-result\n      (int (current-course))\n      (:id assignment)\n      (data/add-result-atom)\n      20)))&quot; &quot;(require '[kurssisuoritukset.data :as data :refer [current-course add-result]])&quot; &quot;(let [course (get-course (int (current-course)))\n      assignments (:assignments course)\n      students (get-students (int (current-course)))]\n  (for [assignment (vals assignments)]\n    (add-result\n      (int (current-course))\n      (:id assignment)\n      \&quot;12345\&quot;\n      20)))&quot; &quot;(let [course (get-course (int (current-course)))\n      assignments (:assignments course)]\n  (for [assignment (vals assignments)]\n    (add-result\n      (int (current-course))\n      (:id assignment)\n      \&quot;12345\&quot;\n      20)))&quot; &quot;(require '[kurssisuoritukset.data :as data :refer [get-course current-course add-result]])&quot; &quot;(let [course (get-course (int (current-course)))\n        assignments (:assignments course)]\n    (for [assignment (vals assignments)]\n      (add-result\n        (int (current-course))\n        (:id assignment)\n        \&quot;12345\&quot;\n        20)))&quot; &quot;(let [course (get-course (int (current-course)))\n        assignments (:assignments course)]\n    (add-course-results\n      (int (current-course))\n      assignments\n      \&quot;12345\&quot;))&quot; &quot;(require '[kurssisuoritukset.data :as data :refer [get-course\n                                                     get-result-atom\n                                                     current-course \n                                                     add-result]])&quot; &quot;(require '[kurssisuoritukset.data :as data :refer [get-course\n                                                     get-result-atom\n                                                     current-course\n                                                     add-result]])&quot; &quot;(defn add-result [course-id assignment-id student-id points]\n  (let [results (get-in (get-course course-id)\n                        [:assignments assignment-id :results])]\n    (swap! coursesA assoc-in [course-id :assignments assignment-id :results]\n           (assoc results student-id {:student-id student-id :points points}))))&quot; &quot;(ns kurssisuoritukset.views.course-results-mod-page)&quot; &quot;(require '[kurssisuoritukset.data :as data :refer [get-course\n                                                     add-result-atom\n                                                     current-course\n                                                     add-result]])&quot; &quot;(add-result-atom)&quot; &quot;(:student-id add-result-atom)&quot; &quot;(nth (:points add-result-atom) 0)&quot; &quot;(:points add-result-atom)&quot; &quot;(1 (:points add-result-atom) 0)&quot; &quot;(get (:points add-result-atom) 0)&quot; &quot;(get (:points add-result-atom) 55)&quot; &quot;(get (:points add-result-atom) 1)&quot; &quot;(get (:points add-result-atom) '1)&quot; &quot;(get @(:points add-result-atom) 1)&quot; &quot;(get @(:points add-result-atom) 2)&quot; &quot;(ns kurssisuoritukset.data)&quot; &quot;@coursesA&quot;], :remote []}}</component>
</project>