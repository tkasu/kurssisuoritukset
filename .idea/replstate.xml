<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1441569952502">{:repl-history {:ide [], :local [&quot;(m/reset! courses coursesA)&quot; &quot;(m/reset! courses @coursesA)&quot; &quot;(defonce coursesA (fb-ref :courses))&quot; &quot;(m/connect base-uri)&quot; &quot;(m/deref courses)&quot; &quot;(m/deref ref courses)&quot; &quot;(m/deref (m/get-in ref :courses))&quot; &quot;(m/deref (m/get-in ref :courses) (chan))&quot; &quot;(m/deref (m/get-in ref :courses) (fn [key value] (println value)))&quot; &quot;(m/deref courses (fn [key value] (println key)))&quot; &quot;(m/deref courses (fn [key value] (println value)))&quot; &quot;(def tomis-friends (m/get-in ref [:users :tomi :friends]))&quot; &quot;(m/deref\n    tomis-friends\n    (fn [key value]\n      (m/reset-in! ref [:users :tomi :num-friends]\n                   (count value))))&quot; &quot;(m/deref (m/get-in ref :courses) (fn [key value] (println key)))&quot; &quot;(require '[cljs.core.async :as async])&quot; &quot;(async/&gt;!! (testc) \&quot;lol\&quot;)&quot; &quot;(def testc (async/chan))&quot; &quot;(async/&gt;!! testc \&quot;lol\&quot;)&quot; &quot;(require '[cljs.core.async :as a])&quot; &quot;(def testc (a/chan))&quot; &quot;(testc)&quot; &quot;(a/put! testc \&quot;Hello\&quot;)&quot; &quot;(a/get! takec (fn [v] (println v)))&quot; &quot;(a/get! testc (fn [v] (println v)))&quot; &quot;(a/put! testc \&quot;Hello2\&quot;)&quot; &quot;(a/take! testc (fn [v] (println v)))&quot; &quot;(a/go 42)&quot; &quot;(a/&lt;!! (a/go 42))&quot; &quot;(require '[cljs.core.async :as a\n             :refer [&lt;! &lt;!! &gt;! &gt;!! chan close! sliding-buffer put! alts!]])&quot; &quot;(require '[cljs.core.async :as a \n             :refer [&lt;! &gt;! chan close! sliding-buffer put! alts!]])&quot; &quot;(require '[cljs.core.async :as a\n             :refer [&lt;! &gt;! chan close! sliding-buffer put! alts!]])&quot; &quot;(take c (fn [v] (println v)))&quot; &quot;(go 42)&quot; &quot;(&lt;!! (go 42))&quot; &quot;(go (println \&quot;It works!\&quot; (&lt;! (go 42))))&quot; &quot;(&lt;!! fbc)&quot; &quot;(&gt;!! fbc \&quot;lol\&quot;)&quot; &quot;(&gt;! fbc \&quot;lol\&quot;)&quot; &quot;(go (&gt;! fbc 2)\n      (println \&quot;done 2\&quot;))&quot; &quot;(go\n    (&lt;! fbc (fn [v] (println v))))&quot; &quot;(take! fbc (1fn [v] (println v)))&quot; &quot;(def fbc (chan 2))&quot; &quot;(go\n    (loop []\n      (&lt;! fbc\n        (fn [v] (println v)))))&quot; &quot;(def to-mult (chan 1))&quot; &quot;(def m (mult to-mult))&quot; &quot;(go\n    (loop []\n      (when-let [v (&lt;! fbc)]\n        (println v)\n        (recur))\n      (println \&quot;Exiting!\&quot;)))&quot; &quot;(go (&gt;! fbc 1)\n      (println \&quot;done 1\&quot;))&quot; &quot;(go (&gt;! fbc 2)\n        (println \&quot;done 2\&quot;))&quot; &quot;(thread\n  (loop []\n    (when-let [v (&lt;!! log-chan)]\n      (println v)\n      (recur)))\n  (println \&quot;Log Closed\&quot;))&quot; &quot;(def log-chan (chan))&quot; &quot;(go\n  (loop []\n    (when-let [v (&lt;!! log-chan)]\n      (println v)\n      (recur)))\n  (println \&quot;Log Closed\&quot;))&quot; &quot;(defn log [msg]\n  (&gt;!! log-chan msg))&quot; &quot;(go\n  (loop []\n    (when-let [v (&lt;! log-chan)]\n      (println v)\n      (recur)))\n  (println \&quot;Log Closed\&quot;))&quot; &quot;(defn log [msg]\n  (put! log-chan msg))&quot; &quot;(log \&quot;lol\&quot;)&quot; &quot;(def c (chan))&quot; &quot;(go\n  (println \&quot;Waiting\&quot;)\n  (&lt;! c)\n  (println \&quot;Got it!\&quot;))&quot; &quot;(put! c \&quot;lol\&quot;)&quot; &quot;(take! c (fn [v] (println v)))&quot; &quot;(def fbc (chan 1))&quot; &quot;(go\n    (loop []\n      (when-let [v (&lt;! fbc)]\n        (println \&quot;Got: \&quot; v)\n        (recur))\n      (println \&quot;Exiting!\&quot;)))&quot; &quot;(put! fbc \&quot;lol\&quot;)&quot; &quot;(go\n    (loop []\n      (when-let [v (&lt;! fbc)]\n        (println \&quot;Got: \&quot; v))\n      (println \&quot;Exiting!\&quot;)))&quot; &quot;(put! fbc \&quot;xdd\&quot;)&quot; &quot;(require '[cljs.core.async :as a\n             :refer [&lt;! &lt;!! &gt;! &gt;!! chan close! sliding-buffer put! take! alts!]])&quot; &quot;(def courses (m/get-in ref [:courses]))&quot; &quot;(def fb-c (chan 1))&quot; &quot;(m/deref courses fb-c)&quot; &quot;(m/deref ref fb-c)&quot; &quot;(defn async-put [&amp; msgs]\n    (put! prn-chan msgs))&quot; &quot;(async/go-loop []\n                 (let [msgs (&lt;! prn-chan)]\n                   (doseq [msg msgs]\n                     (if (string? msg)\n                       (println msg)\n                       (clojure.pprint/pprint msg)))\n                   (println \&quot; \&quot;)\n                   (recur)))&quot; &quot;(comment\n\n  (+ 2 2)\n\n  (defn fb []\n    (js/Firebase. \&quot;https://torrid-fire-7569.firebaseio.com/kurssisuoritukset\&quot;))\n\n  (.push fb \&quot;xd\&quot;)\n\n  (def testc (a/chan))\n\n  (def c (chan))\n\n  (put! c \&quot;lol\&quot;)\n\n  (take! c (fn [v] (println v)))\n\n  (go 42)\n\n  (&lt;!! (go 42))\n\n  (go (println \&quot;It works!\&quot; (&lt;! (go 42))))\n\n  (def fbc (chan 1))\n\n  (go (&gt;! fbc 1)\n      (println \&quot;done 1\&quot;))\n\n  (take! fbc (fn [v] (println v)))\n\n  (go (&gt;! fbc 2)\n      (println \&quot;done 2\&quot;))\n\n  (go\n    (loop []\n      (when-let [v (&lt;! fbc)]\n        (println \&quot;Got: \&quot; v))\n      (println \&quot;Exiting!\&quot;)))\n\n  (put! fbc \&quot;xdd\&quot;)\n\n\n  (def log-chan (chan))\n\n  (go\n    (loop []\n      (when-let [v (&lt;! log-chan)]\n        (println v)\n        (recur)))\n    (println \&quot;Log Closed\&quot;))\n\n\n  (def c (chan))\n\n  (go\n    (println \&quot;Waiting\&quot;)\n    (&lt;! c)\n    (println \&quot;Got it!\&quot;))\n\n  (put! c \&quot;lol\&quot;)\n\n  (take! c (fn [v] (println v)))\n\n\n  (close! log-chan)\n\n  (defn log [msg]\n    (put! log-chan msg))\n\n  (log \&quot;lol\&quot;)\n\n\n  (let [c (chan 1)]\n    (tap m c)\n    (go (loop []\n          (when-let [v (&lt;! c)]\n            (println \&quot;Got! \&quot; v)\n            (recur))\n          (println \&quot;Exiting!\&quot;))))\n\n  (&gt;!! to-mult 42)\n  (&gt;!! to-mult 43)\n\n  (close! to-mult)\n\n  (&lt;!! fbc)\n  (&lt;!! fbc)\n\n\n\n  (require '[matchbox.core :as m])\n\n  (require '[cljs.core.async :as a\n             :refer [&lt;! &gt;! chan close! sliding-buffer put! take! alts!]])\n\n  (require-macros '[cljs.core.async.macros :as m :refer [go alt!]])\n\n\n\n  (m/connect base-uri)\n\n  (def base-uri \&quot;https://kurssisuoritukset.firebaseio.com/\&quot;)\n\n  (def root (m/connect base-uri))\n\n  (def ref\n    (m/connect base-uri))\n\n\n  (m/deref courses fb-c)\n\n  (take! fb-c (fn [v] (println v)))\n\n  (def courses (m/get-in ref [:courses]))\n\n  (def tomis-friends (m/get-in ref [:users :tomi :friends]))\n\n  (m/deref\n    tomis-friends\n    (fn [key value]\n      (m/reset-in! ref [:users :tomi :num-friends]\n                   (count value))))\n\n  (m/reset! tomis-friends [{:name \&quot;Janne\&quot;} {:name \&quot;Anton\&quot;}])\n\n  (m/conj! tomis-friends {:name \&quot;Sonja\&quot;})\n\n  (defn async-put [&amp; msgs]\n    (put! fb-c msgs))\n\n  (m/reset! courses @coursesA)\n\n  (def fb-c (chan))\n\n  (m/deref ref async-put)\n\n  (async/go-loop []\n                 (let [msgs (&lt;! fb-c)]\n                   (doseq [msg msgs]\n                     (println msg)))\n                   (println \&quot; \&quot;)\n                   (recur)))&quot; &quot;(async/go-loop []\n                 (let [msgs (&lt;! fb-c)]\n                   (doseq [msg msgs]\n                     (println msg)))\n                   (println \&quot; \&quot;)\n                   (recur))&quot; &quot;(a/go-loop []\n                 (let [msgs (&lt;! fb-c)]\n                   (doseq [msg msgs]\n                     (println msg)))\n                   (println \&quot; \&quot;)\n                   (recur))&quot; &quot;(a/go-loop []\n     (let [msgs (&lt;! fb-c)]\n       (doseq [msg msgs]\n         (println msg)))\n       (println \&quot; \&quot;)\n       (recur))&quot; &quot;(m/deref ref async-put)&quot; &quot;(go (loop []\n        (when-let [v (&lt;! fb-cc)]\n          (println \&quot;Got! \&quot; v))\n        (println \&quot;Exiting!\&quot;)))&quot; &quot;(take! fbc (fn [v] (println v)))&quot; &quot;(take! fb-c (fn [v] (println v)))&quot; &quot;(defn get-courses []\n    (let [fb-c (chan)]\n      (do\n        (m/deref (m/get-in ref [:courses]) async-put)\n        (go (loop []\n          (when-let [v (&lt;! fb-c)]\n            (println \&quot;Got! \&quot; v))\n          (println \&quot;Exiting!\&quot;))))))&quot; &quot;(get-courses)&quot; &quot;(go (loop []\n        (when-let [v (&lt;! fb-c)]\n          (println \&quot;Got! \&quot; v))\n        (println \&quot;Exiting!\&quot;)))&quot; &quot;(ns kurssisuoritukset.data)&quot; &quot;(require '[cljs.core.async :as a\n             :refer [&lt;! &gt;! chan close! sliding-buffer put! take! alts!]])&quot; &quot;(require-macros '[cljs.core.async.macros :as m :refer [go alt!]])&quot; &quot;(def fb-c (chan))&quot; &quot;(def base-uri \&quot;https://kurssisuoritukset.firebaseio.com/\&quot;)&quot; &quot;(require '[matchbox.core :as m])&quot; &quot;(def ref\n    (m/connect base-uri))&quot; &quot;(defn async-put [&amp; msgs]\n    (put! fb-c msgs))&quot; &quot;(m/deref (m/get-in ref [:courses]) async-put)&quot; &quot;(m/deref-list (m/get-in ref [:courses]) async-put)&quot; &quot;(go (loop []\n        (when-let [v (&lt;! fb-c)]\n          (reset! coursesA v))\n        (println \&quot;Exiting!\&quot;)))&quot; &quot;(m/deref-sw (m/get-in ref [:courses]) async-put)&quot; &quot;(m/deref-rw (m/get-in ref [:courses]) async-put)&quot; &quot;(require '[matchbox.reagent :as r])&quot; &quot;(require '[matchbox.reagent :as mr])&quot; &quot;@coursesA&quot; &quot;(reset! coursesA (sorted-map))&quot; &quot;(def coursesT (mr/sync (m/get-in ref [:courses])))&quot; &quot;(def coursesT (mr/sync-rw (m/get-in ref [:courses])))&quot;], :remote []}}</component>
</project>